// ==UserScript==
// @name         Twitch Volume Control Shortcuts
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Custom keyboard shortcuts for Twitch player volume control
// @author       You
// @match        https://www.twitch.tv/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Configuration - customize these shortcuts
    const VOLUME_UP_KEY = 'ArrowUp';     // Press Up Arrow to increase volume
    const VOLUME_DOWN_KEY = 'ArrowDown'; // Press Down Arrow to decrease volume
    const MUTE_TOGGLE_KEY = 'm';         // Press M to mute/unmute
    const VOLUME_STEP = 0.05;            // 5% volume change per keypress

    // Add event listener for keypresses
    document.addEventListener('keydown', function(event) {
        // Only proceed if we're not typing in an input field
        if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA' || event.target.isContentEditable) {
            return;
        }

        // Get the Twitch player instance
        const twitchPlayer = getTwitchPlayer();
        if (!twitchPlayer) {
            return;
        }

        // Handle volume control based on keypresses
        switch (event.key) {
            case VOLUME_UP_KEY:
                // Increase volume
                const newVolumeUp = Math.min(1, twitchPlayer.getVolume() + VOLUME_STEP);
                twitchPlayer.setVolume(newVolumeUp);
                event.preventDefault();
                break;

            case VOLUME_DOWN_KEY:
                // Decrease volume
                const newVolumeDown = Math.max(0, twitchPlayer.getVolume() - VOLUME_STEP);
                twitchPlayer.setVolume(newVolumeDown);
                event.preventDefault();
                break;

            case MUTE_TOGGLE_KEY:
                // Toggle mute state
                twitchPlayer.setMuted(!twitchPlayer.getMuted());
                event.preventDefault();
                break;
        }
    });

    // Helper function to get the Twitch player instance
    function getTwitchPlayer() {
        // For embedded players
        if (window.Twitch && window.Twitch.Player) {
            const playerElements = document.querySelectorAll('[data-a-target="player-overlay-click-handler"]');
            if (playerElements.length > 0) {
                // Find the player in the Twitch objects
                const videoController = findReactComponent(playerElements[0], 'VideoPlayerController');
                if (videoController && videoController.props && videoController.props.mediaPlayerInstance) {
                    return videoController.props.mediaPlayerInstance;
                }
            }
        }

        // Alternative method - access player through DOM
        const video = document.querySelector('video');
        if (video) {
            return {
                getVolume: () => video.volume,
                setVolume: (vol) => { video.volume = vol; },
                getMuted: () => video.muted,
                setMuted: (mute) => { video.muted = mute; }
            };
        }

        return null;
    }

    // Helper function to find React component
    function findReactComponent(element, targetName) {
        const keys = Object.keys(element);
        for (const key of keys) {
            if (key.startsWith('__reactInternalInstance$')) {
                let fiber = element[key];
                let node = fiber;

                while (fiber) {
                    if (fiber.type && typeof fiber.type === 'function' &&
                        fiber.type.displayName === targetName) {
                        return fiber.stateNode;
                    }

                    if (fiber.child) {
                        fiber = fiber.child;
                    } else if (fiber.sibling) {
                        fiber = fiber.sibling;
                    } else {
                        while (fiber.return) {
                            fiber = fiber.return;
                            if (fiber.sibling) {
                                fiber = fiber.sibling;
                                break;
                            }
                        }
                    }

                    if (fiber === node) {
                        break;
                    }
                }
            }
        }

        return null;
    }
})();